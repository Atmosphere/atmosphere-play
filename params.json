{"name":"Atmosphere-play","tagline":"Atmosphere Framework for Play!","body":"## Atmosphere for Play!\r\n\r\nThis project brings the [Atmosphere Framework](https://github.com/Atmosphere/atmosphere) to the [Play!](http://www.playframework.com/) Framework. It support ALL Atmosphere's modules like Runtime, Jersey and Socket.IO.\r\n\r\nOfficial release soon with more samples!\r\n\r\n## Try it!\r\n\r\nFork the workspace and go under samples/chat or samples/jersey, or download the sample's binaries [Chat]() [Jersey](http://search.maven.org/#search%7Cga%7C1%7Catmosphere-play)\r\n\r\n```bash\r\n   % unzip atmosphere-play-<name>-.zip\r\n   % chmod a+x ./start\r\n   % ./start\r\n```\r\n\r\nDownload [Atmosphere Play!](http://search.maven.org/#search%7Cga%7C1%7Catmosphere-play) or use Maven\r\n\r\n```xml\r\n     <dependency>\r\n         <groupId>org.atmosphere</groupId>\r\n         <artifactId>atmosphere-play</artifactId>\r\n         <version>1.0.0.RC1</version>\r\n     </dependency>\r\n```\r\n\r\n## Join the growing community\r\n\r\nIf you are interested, subscribe to our [mailing list](http://groups.google.com/group/atmosphere-framework) for more info!  We are on irc.freenode.net under #atmosphere-comet\r\n\r\n## WebSockets, Server Side Events, Streaming and Long-Polling transparently supported!\r\n\r\nServer side using atmosphere-runtime\r\n```java\r\n@ManagedService(path = \"/chat\")\r\npublic class Chat {\r\n    private final Logger logger = LoggerFactory.getLogger(Chat.class);\r\n\r\n    /**\r\n     * Invoked when the connection as been fully established and suspended, e.g ready for receiving messages.\r\n     *\r\n     * @param r\r\n     */\r\n    @Ready\r\n    public void onReady(final AtmosphereResource r) {\r\n        logger.info(\"Browser {} connected.\", r.uuid());\r\n    }\r\n\r\n    /**\r\n     * Invoked when the client disconnect or when an unexpected closing of the underlying connection happens.\r\n     *\r\n     * @param event\r\n     */\r\n    @Disconnect\r\n    public void onDisconnect(AtmosphereResourceEvent event) {\r\n        if (event.isCancelled()) {\r\n            logger.info(\"Browser {} unexpectedly disconnected\", event.getResource().uuid());\r\n        } else if (event.isClosedByClient()) {\r\n            logger.info(\"Browser {} closed the connection\", event.getResource().uuid());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simple annotated class that demonstrate how {@link org.atmosphere.config.managed.Encoder} and {@link org.atmosphere.config.managed.Decoder\r\n     * can be used.\r\n     *\r\n     * @param message an instance of {@link Message}\r\n     * @return\r\n     * @throws IOException\r\n     */\r\n    @org.atmosphere.config.service.Message(encoders = {JacksonEncoder.class}, decoders = {JacksonDecoder.class})\r\n    public Message onMessage(Message message) throws IOException {\r\n        logger.info(\"{} just send {}\", message.getAuthor(), message.getMessage());\r\n        return message;\r\n    }\r\n```\r\n\r\nServer side using atmosphere-jersey\r\n```java\r\n @Path(\"/chat\")\r\n public class ChatResource {\r\n\r\n     /**\r\n      * Suspend the response without writing anything back to the client.\r\n      * @return a white space\r\n      */\r\n     @Suspend(contentType = \"application/json\")\r\n     @GET\r\n     public String suspend() {\r\n         return \"\";\r\n     }\r\n\r\n     /**\r\n      * Broadcast the received message object to all suspended response. Do not write back the message to the calling connection.\r\n      * @param message a {@link Message}\r\n      * @return a {@link Response}\r\n      */\r\n     @Broadcast(writeEntity = false)\r\n     @POST\r\n     @Produces(\"application/json\")\r\n     public Response broadcast(Message message) {\r\n         return new Response(message.getAuthor(), message.getMessage());\r\n     }\r\n}\r\n```\r\n\r\nand on the client side,\r\n```js\r\n    $(function () {\r\n        \"use strict\";\r\n\r\n        var header = $('#header');\r\n        var content = $('#content');\r\n        var input = $('#input');\r\n        var status = $('#status');\r\n        var myName = false;\r\n        var author = null;\r\n        var logged = false;\r\n        var socket = $.atmosphere;\r\n        var subSocket;\r\n        var transport = 'websocket';\r\n\r\n        // We are now ready to cut the request\r\n        var request = { url: document.location.toString() + 'chat',\r\n            contentType : \"application/json\",\r\n            logLevel : 'debug',\r\n            transport : transport ,\r\n            trackMessageLength : true,\r\n            fallbackTransport: 'websocket'};\r\n\r\n\r\n        request.onMessage = function (response) {\r\n\r\n             // do something\r\n        };\r\n\r\n        request.onClose = function(response) {\r\n        };\r\n\r\n        request.onError = function(response) {\r\n        };\r\n\r\n        subSocket = socket.subscribe(request);\r\n```\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/61ce12ae5ad452efed81c066acf7a628 \"githalytics.com\")](http://githalytics.com/Atmosphere/atmosphere-play)\r\n\r\n","google":"UA-31990725-1","note":"Don't delete this file! It's used internally to help with page regeneration."}